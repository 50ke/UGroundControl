// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_heartbeat.proto

#include "msg_heartbeat.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace UsvLink {

inline constexpr Heartbeat::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        latitude_{0},
        longitude_{0},
        anchor_remaining_{0},
        connect_status_{false},
        connect_target_system_id_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Heartbeat::Heartbeat(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct HeartbeatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartbeatDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartbeatDefaultTypeInternal() {}
  union {
    Heartbeat _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartbeatDefaultTypeInternal _Heartbeat_default_instance_;
}  // namespace UsvLink
static ::_pb::Metadata file_level_metadata_msg_5fheartbeat_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_msg_5fheartbeat_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_msg_5fheartbeat_2eproto = nullptr;
const ::uint32_t TableStruct_msg_5fheartbeat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::UsvLink::Heartbeat, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::UsvLink::Heartbeat, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::UsvLink::Heartbeat, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::UsvLink::Heartbeat, _impl_.latitude_),
    PROTOBUF_FIELD_OFFSET(::UsvLink::Heartbeat, _impl_.longitude_),
    PROTOBUF_FIELD_OFFSET(::UsvLink::Heartbeat, _impl_.anchor_remaining_),
    PROTOBUF_FIELD_OFFSET(::UsvLink::Heartbeat, _impl_.connect_status_),
    PROTOBUF_FIELD_OFFSET(::UsvLink::Heartbeat, _impl_.connect_target_system_id_),
    ~0u,
    0,
    1,
    2,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 14, -1, sizeof(::UsvLink::Heartbeat)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::UsvLink::_Heartbeat_default_instance_._instance,
};
const char descriptor_table_protodef_msg_5fheartbeat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\023msg_heartbeat.proto\022\007UsvLink\"\321\001\n\tHeart"
    "beat\022\014\n\004name\030\001 \001(\t\022\025\n\010latitude\030\002 \001(\002H\000\210\001"
    "\001\022\026\n\tlongitude\030\003 \001(\002H\001\210\001\001\022\035\n\020anchor_rema"
    "ining\030\004 \001(\002H\002\210\001\001\022\026\n\016connect_status\030\005 \001(\010"
    "\022 \n\030connect_target_system_id\030\006 \001(\005B\013\n\t_l"
    "atitudeB\014\n\n_longitudeB\023\n\021_anchor_remaini"
    "ngb\006proto3"
};
static ::absl::once_flag descriptor_table_msg_5fheartbeat_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_msg_5fheartbeat_2eproto = {
    false,
    false,
    250,
    descriptor_table_protodef_msg_5fheartbeat_2eproto,
    "msg_heartbeat.proto",
    &descriptor_table_msg_5fheartbeat_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_msg_5fheartbeat_2eproto::offsets,
    file_level_metadata_msg_5fheartbeat_2eproto,
    file_level_enum_descriptors_msg_5fheartbeat_2eproto,
    file_level_service_descriptors_msg_5fheartbeat_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_msg_5fheartbeat_2eproto_getter() {
  return &descriptor_table_msg_5fheartbeat_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_msg_5fheartbeat_2eproto(&descriptor_table_msg_5fheartbeat_2eproto);
namespace UsvLink {
// ===================================================================

class Heartbeat::_Internal {
 public:
  using HasBits = decltype(std::declval<Heartbeat>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Heartbeat, _impl_._has_bits_);
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_anchor_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Heartbeat::Heartbeat(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:UsvLink.Heartbeat)
}
inline PROTOBUF_NDEBUG_INLINE Heartbeat::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_) {}

Heartbeat::Heartbeat(
    ::google::protobuf::Arena* arena,
    const Heartbeat& from)
    : ::google::protobuf::Message(arena) {
  Heartbeat* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, latitude_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, latitude_),
           offsetof(Impl_, connect_target_system_id_) -
               offsetof(Impl_, latitude_) +
               sizeof(Impl_::connect_target_system_id_));

  // @@protoc_insertion_point(copy_constructor:UsvLink.Heartbeat)
}
inline PROTOBUF_NDEBUG_INLINE Heartbeat::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        name_(arena) {}

inline void Heartbeat::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, latitude_),
           0,
           offsetof(Impl_, connect_target_system_id_) -
               offsetof(Impl_, latitude_) +
               sizeof(Impl_::connect_target_system_id_));
}
Heartbeat::~Heartbeat() {
  // @@protoc_insertion_point(destructor:UsvLink.Heartbeat)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Heartbeat::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:UsvLink.Heartbeat)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.latitude_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.anchor_remaining_) -
        reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.anchor_remaining_));
  }
  ::memset(&_impl_.connect_status_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.connect_target_system_id_) -
      reinterpret_cast<char*>(&_impl_.connect_status_)) + sizeof(_impl_.connect_target_system_id_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Heartbeat::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 30, 2> Heartbeat::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Heartbeat, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Heartbeat_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Heartbeat, _impl_.name_)}},
    // optional float latitude = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 0, 0, PROTOBUF_FIELD_OFFSET(Heartbeat, _impl_.latitude_)}},
    // optional float longitude = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 1, 0, PROTOBUF_FIELD_OFFSET(Heartbeat, _impl_.longitude_)}},
    // optional float anchor_remaining = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 2, 0, PROTOBUF_FIELD_OFFSET(Heartbeat, _impl_.anchor_remaining_)}},
    // bool connect_status = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Heartbeat, _impl_.connect_status_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Heartbeat, _impl_.connect_status_)}},
    // int32 connect_target_system_id = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Heartbeat, _impl_.connect_target_system_id_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(Heartbeat, _impl_.connect_target_system_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(Heartbeat, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional float latitude = 2;
    {PROTOBUF_FIELD_OFFSET(Heartbeat, _impl_.latitude_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float longitude = 3;
    {PROTOBUF_FIELD_OFFSET(Heartbeat, _impl_.longitude_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float anchor_remaining = 4;
    {PROTOBUF_FIELD_OFFSET(Heartbeat, _impl_.anchor_remaining_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // bool connect_status = 5;
    {PROTOBUF_FIELD_OFFSET(Heartbeat, _impl_.connect_status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 connect_target_system_id = 6;
    {PROTOBUF_FIELD_OFFSET(Heartbeat, _impl_.connect_target_system_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\21\4\0\0\0\0\0\0"
    "UsvLink.Heartbeat"
    "name"
  }},
};

::uint8_t* Heartbeat::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UsvLink.Heartbeat)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "UsvLink.Heartbeat.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional float latitude = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_latitude(), target);
  }

  // optional float longitude = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_longitude(), target);
  }

  // optional float anchor_remaining = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_anchor_remaining(), target);
  }

  // bool connect_status = 5;
  if (this->_internal_connect_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_connect_status(), target);
  }

  // int32 connect_target_system_id = 6;
  if (this->_internal_connect_target_system_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_connect_target_system_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UsvLink.Heartbeat)
  return target;
}

::size_t Heartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UsvLink.Heartbeat)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float latitude = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 5;
    }

    // optional float longitude = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }

    // optional float anchor_remaining = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 5;
    }

  }
  // bool connect_status = 5;
  if (this->_internal_connect_status() != 0) {
    total_size += 2;
  }

  // int32 connect_target_system_id = 6;
  if (this->_internal_connect_target_system_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_connect_target_system_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Heartbeat::_class_data_ = {
    Heartbeat::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Heartbeat::GetClassData() const {
  return &_class_data_;
}

void Heartbeat::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Heartbeat*>(&to_msg);
  auto& from = static_cast<const Heartbeat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UsvLink.Heartbeat)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.latitude_ = from._impl_.latitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.longitude_ = from._impl_.longitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.anchor_remaining_ = from._impl_.anchor_remaining_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_connect_status() != 0) {
    _this->_internal_set_connect_status(from._internal_connect_status());
  }
  if (from._internal_connect_target_system_id() != 0) {
    _this->_internal_set_connect_target_system_id(from._internal_connect_target_system_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Heartbeat::CopyFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UsvLink.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Heartbeat::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Heartbeat::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Heartbeat::InternalSwap(Heartbeat* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Heartbeat, _impl_.connect_target_system_id_)
      + sizeof(Heartbeat::_impl_.connect_target_system_id_)
      - PROTOBUF_FIELD_OFFSET(Heartbeat, _impl_.latitude_)>(
          reinterpret_cast<char*>(&_impl_.latitude_),
          reinterpret_cast<char*>(&other->_impl_.latitude_));
}

::google::protobuf::Metadata Heartbeat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fheartbeat_2eproto_getter, &descriptor_table_msg_5fheartbeat_2eproto_once,
      file_level_metadata_msg_5fheartbeat_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace UsvLink
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
