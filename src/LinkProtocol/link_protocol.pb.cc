// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: link_protocol.proto

#include "link_protocol.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace UsvLink {

inline constexpr MessagePacket::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        system_id_{0},
        component_id_{0},
        target_system_id_{0},
        target_component_id_{0},
        time_ms_{::int64_t{0}},
        msg_id_{static_cast< ::UsvLink::MsgId >(0)},
        msg_src_{static_cast< ::UsvLink::MsgSrc >(0)},
        msg_link_{static_cast< ::UsvLink::MsgLink >(0)},
        msg_payload_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR MessagePacket::MessagePacket(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MessagePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessagePacketDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessagePacketDefaultTypeInternal() {}
  union {
    MessagePacket _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessagePacketDefaultTypeInternal _MessagePacket_default_instance_;
}  // namespace UsvLink
static ::_pb::Metadata file_level_metadata_link_5fprotocol_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_link_5fprotocol_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_link_5fprotocol_2eproto = nullptr;
const ::uint32_t TableStruct_link_5fprotocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::UsvLink::MessagePacket, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::UsvLink::MessagePacket, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::UsvLink::MessagePacket, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::UsvLink::MessagePacket, _impl_.system_id_),
    PROTOBUF_FIELD_OFFSET(::UsvLink::MessagePacket, _impl_.component_id_),
    PROTOBUF_FIELD_OFFSET(::UsvLink::MessagePacket, _impl_.target_system_id_),
    PROTOBUF_FIELD_OFFSET(::UsvLink::MessagePacket, _impl_.target_component_id_),
    PROTOBUF_FIELD_OFFSET(::UsvLink::MessagePacket, _impl_.msg_id_),
    PROTOBUF_FIELD_OFFSET(::UsvLink::MessagePacket, _impl_.time_ms_),
    PROTOBUF_FIELD_OFFSET(::UsvLink::MessagePacket, _impl_.msg_src_),
    PROTOBUF_FIELD_OFFSET(::UsvLink::MessagePacket, _impl_.msg_link_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::UsvLink::MessagePacket, _impl_.msg_payload_),
    ~0u,
    0,
    1,
    2,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 38, -1, sizeof(::UsvLink::MessagePacket)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::UsvLink::_MessagePacket_default_instance_._instance,
};
const char descriptor_table_protodef_link_5fprotocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\023link_protocol.proto\022\007UsvLink\032\016msg_enum"
    ".proto\032\023msg_heartbeat.proto\032\031msg_connect"
    "_request.proto\032\032msg_connect_response.pro"
    "to\032\034msg_disconnect_request.proto\032\035msg_di"
    "sconnect_response.proto\032\030msg_battery_sta"
    "tus.proto\032\021msg_command.proto\032\037msg_missio"
    "n_clear_request.proto\032 msg_mission_clear"
    "_response.proto\032\031msg_mission_current.pro"
    "to\032\"msg_mission_download_request.proto\032#"
    "msg_mission_download_response.proto\032\026msg"
    "_mission_item.proto\032\035msg_mission_set_cur"
    "rent.proto\032 msg_mission_upload_request.p"
    "roto\032!msg_mission_upload_response.proto\032"
    "\024msg_param_item.proto\032\034msg_param_read_re"
    "quest.proto\032\035msg_param_read_response.pro"
    "to\032\035msg_param_write_request.proto\032\036msg_p"
    "aram_write_response.proto\"\345\013\n\rMessagePac"
    "ket\022\021\n\tsystem_id\030\001 \001(\005\022\031\n\014component_id\030\002"
    " \001(\005H\001\210\001\001\022\035\n\020target_system_id\030\003 \001(\005H\002\210\001\001"
    "\022 \n\023target_component_id\030\004 \001(\005H\003\210\001\001\022\036\n\006ms"
    "g_id\030\005 \001(\0162\016.UsvLink.MsgId\022\017\n\007time_ms\030\006 "
    "\001(\003\022 \n\007msg_src\030\007 \001(\0162\017.UsvLink.MsgSrc\022\"\n"
    "\010msg_link\030\010 \001(\0162\020.UsvLink.MsgLink\022\'\n\thea"
    "rtbeat\030\t \001(\0132\022.UsvLink.HeartbeatH\000\0222\n\017co"
    "nnect_request\030\n \001(\0132\027.UsvLink.ConnectReq"
    "uestH\000\0224\n\020connect_response\030\013 \001(\0132\030.UsvLi"
    "nk.ConnectResponseH\000\0228\n\022disconnect_reque"
    "st\030\014 \001(\0132\032.UsvLink.DisconnectRequestH\000\022:"
    "\n\023disconnect_response\030\r \001(\0132\033.UsvLink.Di"
    "sconnectResponseH\000\022(\n\nparam_item\030\016 \001(\0132\022"
    ".UsvLink.ParamItemH\000\0227\n\022param_read_reque"
    "st\030\017 \001(\0132\031.UsvLink.ParamReadRequestH\000\0229\n"
    "\023param_read_response\030\020 \001(\0132\032.UsvLink.Par"
    "amReadResponseH\000\0229\n\023param_write_request\030"
    "\021 \001(\0132\032.UsvLink.ParamWriteRequestH\000\022;\n\024p"
    "aram_write_response\030\022 \001(\0132\033.UsvLink.Para"
    "mWriteResponseH\000\022,\n\014mission_item\030\023 \001(\0132\024"
    ".UsvLink.MissionItemH\000\022C\n\030mission_downlo"
    "ad_request\030\024 \001(\0132\037.UsvLink.MissionDownlo"
    "adRequestH\000\022E\n\031mission_download_response"
    "\030\025 \001(\0132 .UsvLink.MissionDownloadResponse"
    "H\000\022\?\n\026mission_upload_request\030\026 \001(\0132\035.Usv"
    "Link.MissionUploadRequestH\000\022A\n\027mission_u"
    "pload_response\030\027 \001(\0132\036.UsvLink.MissionUp"
    "loadResponseH\000\0222\n\017mission_current\030\030 \001(\0132"
    "\027.UsvLink.MissionCurrentH\000\0229\n\023mission_se"
    "t_current\030\031 \001(\0132\032.UsvLink.MissionSetCurr"
    "entH\000\022=\n\025mission_clear_request\030\032 \001(\0132\034.U"
    "svLink.MissionClearRequestH\000\022\?\n\026mission_"
    "clear_response\030\033 \001(\0132\035.UsvLink.MissionCl"
    "earResponseH\000\0220\n\016battery_status\030\034 \001(\0132\026."
    "UsvLink.BatteryStatusH\000\022#\n\007command\030\035 \001(\013"
    "2\020.UsvLink.CommandH\000B\r\n\013msg_payloadB\017\n\r_"
    "component_idB\023\n\021_target_system_idB\026\n\024_ta"
    "rget_component_idb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_link_5fprotocol_2eproto_deps[22] =
    {
        &::descriptor_table_msg_5fbattery_5fstatus_2eproto,
        &::descriptor_table_msg_5fcommand_2eproto,
        &::descriptor_table_msg_5fconnect_5frequest_2eproto,
        &::descriptor_table_msg_5fconnect_5fresponse_2eproto,
        &::descriptor_table_msg_5fdisconnect_5frequest_2eproto,
        &::descriptor_table_msg_5fdisconnect_5fresponse_2eproto,
        &::descriptor_table_msg_5fenum_2eproto,
        &::descriptor_table_msg_5fheartbeat_2eproto,
        &::descriptor_table_msg_5fmission_5fclear_5frequest_2eproto,
        &::descriptor_table_msg_5fmission_5fclear_5fresponse_2eproto,
        &::descriptor_table_msg_5fmission_5fcurrent_2eproto,
        &::descriptor_table_msg_5fmission_5fdownload_5frequest_2eproto,
        &::descriptor_table_msg_5fmission_5fdownload_5fresponse_2eproto,
        &::descriptor_table_msg_5fmission_5fitem_2eproto,
        &::descriptor_table_msg_5fmission_5fset_5fcurrent_2eproto,
        &::descriptor_table_msg_5fmission_5fupload_5frequest_2eproto,
        &::descriptor_table_msg_5fmission_5fupload_5fresponse_2eproto,
        &::descriptor_table_msg_5fparam_5fitem_2eproto,
        &::descriptor_table_msg_5fparam_5fread_5frequest_2eproto,
        &::descriptor_table_msg_5fparam_5fread_5fresponse_2eproto,
        &::descriptor_table_msg_5fparam_5fwrite_5frequest_2eproto,
        &::descriptor_table_msg_5fparam_5fwrite_5fresponse_2eproto,
};
static ::absl::once_flag descriptor_table_link_5fprotocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_link_5fprotocol_2eproto = {
    false,
    false,
    2185,
    descriptor_table_protodef_link_5fprotocol_2eproto,
    "link_protocol.proto",
    &descriptor_table_link_5fprotocol_2eproto_once,
    descriptor_table_link_5fprotocol_2eproto_deps,
    22,
    1,
    schemas,
    file_default_instances,
    TableStruct_link_5fprotocol_2eproto::offsets,
    file_level_metadata_link_5fprotocol_2eproto,
    file_level_enum_descriptors_link_5fprotocol_2eproto,
    file_level_service_descriptors_link_5fprotocol_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_link_5fprotocol_2eproto_getter() {
  return &descriptor_table_link_5fprotocol_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_link_5fprotocol_2eproto(&descriptor_table_link_5fprotocol_2eproto);
namespace UsvLink {
// ===================================================================

class MessagePacket::_Internal {
 public:
  using HasBits = decltype(std::declval<MessagePacket>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::UsvLink::MessagePacket, _impl_._oneof_case_);
  static void set_has_component_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_system_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_component_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::UsvLink::Heartbeat& heartbeat(const MessagePacket* msg);
  static const ::UsvLink::ConnectRequest& connect_request(const MessagePacket* msg);
  static const ::UsvLink::ConnectResponse& connect_response(const MessagePacket* msg);
  static const ::UsvLink::DisconnectRequest& disconnect_request(const MessagePacket* msg);
  static const ::UsvLink::DisconnectResponse& disconnect_response(const MessagePacket* msg);
  static const ::UsvLink::ParamItem& param_item(const MessagePacket* msg);
  static const ::UsvLink::ParamReadRequest& param_read_request(const MessagePacket* msg);
  static const ::UsvLink::ParamReadResponse& param_read_response(const MessagePacket* msg);
  static const ::UsvLink::ParamWriteRequest& param_write_request(const MessagePacket* msg);
  static const ::UsvLink::ParamWriteResponse& param_write_response(const MessagePacket* msg);
  static const ::UsvLink::MissionItem& mission_item(const MessagePacket* msg);
  static const ::UsvLink::MissionDownloadRequest& mission_download_request(const MessagePacket* msg);
  static const ::UsvLink::MissionDownloadResponse& mission_download_response(const MessagePacket* msg);
  static const ::UsvLink::MissionUploadRequest& mission_upload_request(const MessagePacket* msg);
  static const ::UsvLink::MissionUploadResponse& mission_upload_response(const MessagePacket* msg);
  static const ::UsvLink::MissionCurrent& mission_current(const MessagePacket* msg);
  static const ::UsvLink::MissionSetCurrent& mission_set_current(const MessagePacket* msg);
  static const ::UsvLink::MissionClearRequest& mission_clear_request(const MessagePacket* msg);
  static const ::UsvLink::MissionClearResponse& mission_clear_response(const MessagePacket* msg);
  static const ::UsvLink::BatteryStatus& battery_status(const MessagePacket* msg);
  static const ::UsvLink::Command& command(const MessagePacket* msg);
};

const ::UsvLink::Heartbeat& MessagePacket::_Internal::heartbeat(const MessagePacket* msg) {
  return *msg->_impl_.msg_payload_.heartbeat_;
}
const ::UsvLink::ConnectRequest& MessagePacket::_Internal::connect_request(const MessagePacket* msg) {
  return *msg->_impl_.msg_payload_.connect_request_;
}
const ::UsvLink::ConnectResponse& MessagePacket::_Internal::connect_response(const MessagePacket* msg) {
  return *msg->_impl_.msg_payload_.connect_response_;
}
const ::UsvLink::DisconnectRequest& MessagePacket::_Internal::disconnect_request(const MessagePacket* msg) {
  return *msg->_impl_.msg_payload_.disconnect_request_;
}
const ::UsvLink::DisconnectResponse& MessagePacket::_Internal::disconnect_response(const MessagePacket* msg) {
  return *msg->_impl_.msg_payload_.disconnect_response_;
}
const ::UsvLink::ParamItem& MessagePacket::_Internal::param_item(const MessagePacket* msg) {
  return *msg->_impl_.msg_payload_.param_item_;
}
const ::UsvLink::ParamReadRequest& MessagePacket::_Internal::param_read_request(const MessagePacket* msg) {
  return *msg->_impl_.msg_payload_.param_read_request_;
}
const ::UsvLink::ParamReadResponse& MessagePacket::_Internal::param_read_response(const MessagePacket* msg) {
  return *msg->_impl_.msg_payload_.param_read_response_;
}
const ::UsvLink::ParamWriteRequest& MessagePacket::_Internal::param_write_request(const MessagePacket* msg) {
  return *msg->_impl_.msg_payload_.param_write_request_;
}
const ::UsvLink::ParamWriteResponse& MessagePacket::_Internal::param_write_response(const MessagePacket* msg) {
  return *msg->_impl_.msg_payload_.param_write_response_;
}
const ::UsvLink::MissionItem& MessagePacket::_Internal::mission_item(const MessagePacket* msg) {
  return *msg->_impl_.msg_payload_.mission_item_;
}
const ::UsvLink::MissionDownloadRequest& MessagePacket::_Internal::mission_download_request(const MessagePacket* msg) {
  return *msg->_impl_.msg_payload_.mission_download_request_;
}
const ::UsvLink::MissionDownloadResponse& MessagePacket::_Internal::mission_download_response(const MessagePacket* msg) {
  return *msg->_impl_.msg_payload_.mission_download_response_;
}
const ::UsvLink::MissionUploadRequest& MessagePacket::_Internal::mission_upload_request(const MessagePacket* msg) {
  return *msg->_impl_.msg_payload_.mission_upload_request_;
}
const ::UsvLink::MissionUploadResponse& MessagePacket::_Internal::mission_upload_response(const MessagePacket* msg) {
  return *msg->_impl_.msg_payload_.mission_upload_response_;
}
const ::UsvLink::MissionCurrent& MessagePacket::_Internal::mission_current(const MessagePacket* msg) {
  return *msg->_impl_.msg_payload_.mission_current_;
}
const ::UsvLink::MissionSetCurrent& MessagePacket::_Internal::mission_set_current(const MessagePacket* msg) {
  return *msg->_impl_.msg_payload_.mission_set_current_;
}
const ::UsvLink::MissionClearRequest& MessagePacket::_Internal::mission_clear_request(const MessagePacket* msg) {
  return *msg->_impl_.msg_payload_.mission_clear_request_;
}
const ::UsvLink::MissionClearResponse& MessagePacket::_Internal::mission_clear_response(const MessagePacket* msg) {
  return *msg->_impl_.msg_payload_.mission_clear_response_;
}
const ::UsvLink::BatteryStatus& MessagePacket::_Internal::battery_status(const MessagePacket* msg) {
  return *msg->_impl_.msg_payload_.battery_status_;
}
const ::UsvLink::Command& MessagePacket::_Internal::command(const MessagePacket* msg) {
  return *msg->_impl_.msg_payload_.command_;
}
void MessagePacket::set_allocated_heartbeat(::UsvLink::Heartbeat* heartbeat) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_msg_payload();
  if (heartbeat) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(heartbeat)->GetArena();
    if (message_arena != submessage_arena) {
      heartbeat = ::google::protobuf::internal::GetOwnedMessage(message_arena, heartbeat, submessage_arena);
    }
    set_has_heartbeat();
    _impl_.msg_payload_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_set_allocated:UsvLink.MessagePacket.heartbeat)
}
void MessagePacket::clear_heartbeat() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (msg_payload_case() == kHeartbeat) {
    if (GetArena() == nullptr) {
      delete _impl_.msg_payload_.heartbeat_;
    }
    clear_has_msg_payload();
  }
}
void MessagePacket::set_allocated_connect_request(::UsvLink::ConnectRequest* connect_request) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_msg_payload();
  if (connect_request) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(connect_request)->GetArena();
    if (message_arena != submessage_arena) {
      connect_request = ::google::protobuf::internal::GetOwnedMessage(message_arena, connect_request, submessage_arena);
    }
    set_has_connect_request();
    _impl_.msg_payload_.connect_request_ = connect_request;
  }
  // @@protoc_insertion_point(field_set_allocated:UsvLink.MessagePacket.connect_request)
}
void MessagePacket::clear_connect_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (msg_payload_case() == kConnectRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.msg_payload_.connect_request_;
    }
    clear_has_msg_payload();
  }
}
void MessagePacket::set_allocated_connect_response(::UsvLink::ConnectResponse* connect_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_msg_payload();
  if (connect_response) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(connect_response)->GetArena();
    if (message_arena != submessage_arena) {
      connect_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, connect_response, submessage_arena);
    }
    set_has_connect_response();
    _impl_.msg_payload_.connect_response_ = connect_response;
  }
  // @@protoc_insertion_point(field_set_allocated:UsvLink.MessagePacket.connect_response)
}
void MessagePacket::clear_connect_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (msg_payload_case() == kConnectResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.msg_payload_.connect_response_;
    }
    clear_has_msg_payload();
  }
}
void MessagePacket::set_allocated_disconnect_request(::UsvLink::DisconnectRequest* disconnect_request) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_msg_payload();
  if (disconnect_request) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(disconnect_request)->GetArena();
    if (message_arena != submessage_arena) {
      disconnect_request = ::google::protobuf::internal::GetOwnedMessage(message_arena, disconnect_request, submessage_arena);
    }
    set_has_disconnect_request();
    _impl_.msg_payload_.disconnect_request_ = disconnect_request;
  }
  // @@protoc_insertion_point(field_set_allocated:UsvLink.MessagePacket.disconnect_request)
}
void MessagePacket::clear_disconnect_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (msg_payload_case() == kDisconnectRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.msg_payload_.disconnect_request_;
    }
    clear_has_msg_payload();
  }
}
void MessagePacket::set_allocated_disconnect_response(::UsvLink::DisconnectResponse* disconnect_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_msg_payload();
  if (disconnect_response) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(disconnect_response)->GetArena();
    if (message_arena != submessage_arena) {
      disconnect_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, disconnect_response, submessage_arena);
    }
    set_has_disconnect_response();
    _impl_.msg_payload_.disconnect_response_ = disconnect_response;
  }
  // @@protoc_insertion_point(field_set_allocated:UsvLink.MessagePacket.disconnect_response)
}
void MessagePacket::clear_disconnect_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (msg_payload_case() == kDisconnectResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.msg_payload_.disconnect_response_;
    }
    clear_has_msg_payload();
  }
}
void MessagePacket::set_allocated_param_item(::UsvLink::ParamItem* param_item) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_msg_payload();
  if (param_item) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(param_item)->GetArena();
    if (message_arena != submessage_arena) {
      param_item = ::google::protobuf::internal::GetOwnedMessage(message_arena, param_item, submessage_arena);
    }
    set_has_param_item();
    _impl_.msg_payload_.param_item_ = param_item;
  }
  // @@protoc_insertion_point(field_set_allocated:UsvLink.MessagePacket.param_item)
}
void MessagePacket::clear_param_item() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (msg_payload_case() == kParamItem) {
    if (GetArena() == nullptr) {
      delete _impl_.msg_payload_.param_item_;
    }
    clear_has_msg_payload();
  }
}
void MessagePacket::set_allocated_param_read_request(::UsvLink::ParamReadRequest* param_read_request) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_msg_payload();
  if (param_read_request) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(param_read_request)->GetArena();
    if (message_arena != submessage_arena) {
      param_read_request = ::google::protobuf::internal::GetOwnedMessage(message_arena, param_read_request, submessage_arena);
    }
    set_has_param_read_request();
    _impl_.msg_payload_.param_read_request_ = param_read_request;
  }
  // @@protoc_insertion_point(field_set_allocated:UsvLink.MessagePacket.param_read_request)
}
void MessagePacket::clear_param_read_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (msg_payload_case() == kParamReadRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.msg_payload_.param_read_request_;
    }
    clear_has_msg_payload();
  }
}
void MessagePacket::set_allocated_param_read_response(::UsvLink::ParamReadResponse* param_read_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_msg_payload();
  if (param_read_response) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(param_read_response)->GetArena();
    if (message_arena != submessage_arena) {
      param_read_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, param_read_response, submessage_arena);
    }
    set_has_param_read_response();
    _impl_.msg_payload_.param_read_response_ = param_read_response;
  }
  // @@protoc_insertion_point(field_set_allocated:UsvLink.MessagePacket.param_read_response)
}
void MessagePacket::clear_param_read_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (msg_payload_case() == kParamReadResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.msg_payload_.param_read_response_;
    }
    clear_has_msg_payload();
  }
}
void MessagePacket::set_allocated_param_write_request(::UsvLink::ParamWriteRequest* param_write_request) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_msg_payload();
  if (param_write_request) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(param_write_request)->GetArena();
    if (message_arena != submessage_arena) {
      param_write_request = ::google::protobuf::internal::GetOwnedMessage(message_arena, param_write_request, submessage_arena);
    }
    set_has_param_write_request();
    _impl_.msg_payload_.param_write_request_ = param_write_request;
  }
  // @@protoc_insertion_point(field_set_allocated:UsvLink.MessagePacket.param_write_request)
}
void MessagePacket::clear_param_write_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (msg_payload_case() == kParamWriteRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.msg_payload_.param_write_request_;
    }
    clear_has_msg_payload();
  }
}
void MessagePacket::set_allocated_param_write_response(::UsvLink::ParamWriteResponse* param_write_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_msg_payload();
  if (param_write_response) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(param_write_response)->GetArena();
    if (message_arena != submessage_arena) {
      param_write_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, param_write_response, submessage_arena);
    }
    set_has_param_write_response();
    _impl_.msg_payload_.param_write_response_ = param_write_response;
  }
  // @@protoc_insertion_point(field_set_allocated:UsvLink.MessagePacket.param_write_response)
}
void MessagePacket::clear_param_write_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (msg_payload_case() == kParamWriteResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.msg_payload_.param_write_response_;
    }
    clear_has_msg_payload();
  }
}
void MessagePacket::set_allocated_mission_item(::UsvLink::MissionItem* mission_item) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_msg_payload();
  if (mission_item) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(mission_item)->GetArena();
    if (message_arena != submessage_arena) {
      mission_item = ::google::protobuf::internal::GetOwnedMessage(message_arena, mission_item, submessage_arena);
    }
    set_has_mission_item();
    _impl_.msg_payload_.mission_item_ = mission_item;
  }
  // @@protoc_insertion_point(field_set_allocated:UsvLink.MessagePacket.mission_item)
}
void MessagePacket::clear_mission_item() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (msg_payload_case() == kMissionItem) {
    if (GetArena() == nullptr) {
      delete _impl_.msg_payload_.mission_item_;
    }
    clear_has_msg_payload();
  }
}
void MessagePacket::set_allocated_mission_download_request(::UsvLink::MissionDownloadRequest* mission_download_request) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_msg_payload();
  if (mission_download_request) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(mission_download_request)->GetArena();
    if (message_arena != submessage_arena) {
      mission_download_request = ::google::protobuf::internal::GetOwnedMessage(message_arena, mission_download_request, submessage_arena);
    }
    set_has_mission_download_request();
    _impl_.msg_payload_.mission_download_request_ = mission_download_request;
  }
  // @@protoc_insertion_point(field_set_allocated:UsvLink.MessagePacket.mission_download_request)
}
void MessagePacket::clear_mission_download_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (msg_payload_case() == kMissionDownloadRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.msg_payload_.mission_download_request_;
    }
    clear_has_msg_payload();
  }
}
void MessagePacket::set_allocated_mission_download_response(::UsvLink::MissionDownloadResponse* mission_download_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_msg_payload();
  if (mission_download_response) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(mission_download_response)->GetArena();
    if (message_arena != submessage_arena) {
      mission_download_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, mission_download_response, submessage_arena);
    }
    set_has_mission_download_response();
    _impl_.msg_payload_.mission_download_response_ = mission_download_response;
  }
  // @@protoc_insertion_point(field_set_allocated:UsvLink.MessagePacket.mission_download_response)
}
void MessagePacket::clear_mission_download_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (msg_payload_case() == kMissionDownloadResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.msg_payload_.mission_download_response_;
    }
    clear_has_msg_payload();
  }
}
void MessagePacket::set_allocated_mission_upload_request(::UsvLink::MissionUploadRequest* mission_upload_request) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_msg_payload();
  if (mission_upload_request) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(mission_upload_request)->GetArena();
    if (message_arena != submessage_arena) {
      mission_upload_request = ::google::protobuf::internal::GetOwnedMessage(message_arena, mission_upload_request, submessage_arena);
    }
    set_has_mission_upload_request();
    _impl_.msg_payload_.mission_upload_request_ = mission_upload_request;
  }
  // @@protoc_insertion_point(field_set_allocated:UsvLink.MessagePacket.mission_upload_request)
}
void MessagePacket::clear_mission_upload_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (msg_payload_case() == kMissionUploadRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.msg_payload_.mission_upload_request_;
    }
    clear_has_msg_payload();
  }
}
void MessagePacket::set_allocated_mission_upload_response(::UsvLink::MissionUploadResponse* mission_upload_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_msg_payload();
  if (mission_upload_response) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(mission_upload_response)->GetArena();
    if (message_arena != submessage_arena) {
      mission_upload_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, mission_upload_response, submessage_arena);
    }
    set_has_mission_upload_response();
    _impl_.msg_payload_.mission_upload_response_ = mission_upload_response;
  }
  // @@protoc_insertion_point(field_set_allocated:UsvLink.MessagePacket.mission_upload_response)
}
void MessagePacket::clear_mission_upload_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (msg_payload_case() == kMissionUploadResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.msg_payload_.mission_upload_response_;
    }
    clear_has_msg_payload();
  }
}
void MessagePacket::set_allocated_mission_current(::UsvLink::MissionCurrent* mission_current) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_msg_payload();
  if (mission_current) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(mission_current)->GetArena();
    if (message_arena != submessage_arena) {
      mission_current = ::google::protobuf::internal::GetOwnedMessage(message_arena, mission_current, submessage_arena);
    }
    set_has_mission_current();
    _impl_.msg_payload_.mission_current_ = mission_current;
  }
  // @@protoc_insertion_point(field_set_allocated:UsvLink.MessagePacket.mission_current)
}
void MessagePacket::clear_mission_current() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (msg_payload_case() == kMissionCurrent) {
    if (GetArena() == nullptr) {
      delete _impl_.msg_payload_.mission_current_;
    }
    clear_has_msg_payload();
  }
}
void MessagePacket::set_allocated_mission_set_current(::UsvLink::MissionSetCurrent* mission_set_current) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_msg_payload();
  if (mission_set_current) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(mission_set_current)->GetArena();
    if (message_arena != submessage_arena) {
      mission_set_current = ::google::protobuf::internal::GetOwnedMessage(message_arena, mission_set_current, submessage_arena);
    }
    set_has_mission_set_current();
    _impl_.msg_payload_.mission_set_current_ = mission_set_current;
  }
  // @@protoc_insertion_point(field_set_allocated:UsvLink.MessagePacket.mission_set_current)
}
void MessagePacket::clear_mission_set_current() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (msg_payload_case() == kMissionSetCurrent) {
    if (GetArena() == nullptr) {
      delete _impl_.msg_payload_.mission_set_current_;
    }
    clear_has_msg_payload();
  }
}
void MessagePacket::set_allocated_mission_clear_request(::UsvLink::MissionClearRequest* mission_clear_request) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_msg_payload();
  if (mission_clear_request) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(mission_clear_request)->GetArena();
    if (message_arena != submessage_arena) {
      mission_clear_request = ::google::protobuf::internal::GetOwnedMessage(message_arena, mission_clear_request, submessage_arena);
    }
    set_has_mission_clear_request();
    _impl_.msg_payload_.mission_clear_request_ = mission_clear_request;
  }
  // @@protoc_insertion_point(field_set_allocated:UsvLink.MessagePacket.mission_clear_request)
}
void MessagePacket::clear_mission_clear_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (msg_payload_case() == kMissionClearRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.msg_payload_.mission_clear_request_;
    }
    clear_has_msg_payload();
  }
}
void MessagePacket::set_allocated_mission_clear_response(::UsvLink::MissionClearResponse* mission_clear_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_msg_payload();
  if (mission_clear_response) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(mission_clear_response)->GetArena();
    if (message_arena != submessage_arena) {
      mission_clear_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, mission_clear_response, submessage_arena);
    }
    set_has_mission_clear_response();
    _impl_.msg_payload_.mission_clear_response_ = mission_clear_response;
  }
  // @@protoc_insertion_point(field_set_allocated:UsvLink.MessagePacket.mission_clear_response)
}
void MessagePacket::clear_mission_clear_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (msg_payload_case() == kMissionClearResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.msg_payload_.mission_clear_response_;
    }
    clear_has_msg_payload();
  }
}
void MessagePacket::set_allocated_battery_status(::UsvLink::BatteryStatus* battery_status) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_msg_payload();
  if (battery_status) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(battery_status)->GetArena();
    if (message_arena != submessage_arena) {
      battery_status = ::google::protobuf::internal::GetOwnedMessage(message_arena, battery_status, submessage_arena);
    }
    set_has_battery_status();
    _impl_.msg_payload_.battery_status_ = battery_status;
  }
  // @@protoc_insertion_point(field_set_allocated:UsvLink.MessagePacket.battery_status)
}
void MessagePacket::clear_battery_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (msg_payload_case() == kBatteryStatus) {
    if (GetArena() == nullptr) {
      delete _impl_.msg_payload_.battery_status_;
    }
    clear_has_msg_payload();
  }
}
void MessagePacket::set_allocated_command(::UsvLink::Command* command) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_msg_payload();
  if (command) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(command)->GetArena();
    if (message_arena != submessage_arena) {
      command = ::google::protobuf::internal::GetOwnedMessage(message_arena, command, submessage_arena);
    }
    set_has_command();
    _impl_.msg_payload_.command_ = command;
  }
  // @@protoc_insertion_point(field_set_allocated:UsvLink.MessagePacket.command)
}
void MessagePacket::clear_command() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (msg_payload_case() == kCommand) {
    if (GetArena() == nullptr) {
      delete _impl_.msg_payload_.command_;
    }
    clear_has_msg_payload();
  }
}
MessagePacket::MessagePacket(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:UsvLink.MessagePacket)
}
inline PROTOBUF_NDEBUG_INLINE MessagePacket::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        msg_payload_{},
        _oneof_case_{from._oneof_case_[0]} {}

MessagePacket::MessagePacket(
    ::google::protobuf::Arena* arena,
    const MessagePacket& from)
    : ::google::protobuf::Message(arena) {
  MessagePacket* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, system_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, system_id_),
           offsetof(Impl_, msg_link_) -
               offsetof(Impl_, system_id_) +
               sizeof(Impl_::msg_link_));
  switch (msg_payload_case()) {
    case MSG_PAYLOAD_NOT_SET:
      break;
      case kHeartbeat:
        _impl_.msg_payload_.heartbeat_ = CreateMaybeMessage<::UsvLink::Heartbeat>(arena, *from._impl_.msg_payload_.heartbeat_);
        break;
      case kConnectRequest:
        _impl_.msg_payload_.connect_request_ = CreateMaybeMessage<::UsvLink::ConnectRequest>(arena, *from._impl_.msg_payload_.connect_request_);
        break;
      case kConnectResponse:
        _impl_.msg_payload_.connect_response_ = CreateMaybeMessage<::UsvLink::ConnectResponse>(arena, *from._impl_.msg_payload_.connect_response_);
        break;
      case kDisconnectRequest:
        _impl_.msg_payload_.disconnect_request_ = CreateMaybeMessage<::UsvLink::DisconnectRequest>(arena, *from._impl_.msg_payload_.disconnect_request_);
        break;
      case kDisconnectResponse:
        _impl_.msg_payload_.disconnect_response_ = CreateMaybeMessage<::UsvLink::DisconnectResponse>(arena, *from._impl_.msg_payload_.disconnect_response_);
        break;
      case kParamItem:
        _impl_.msg_payload_.param_item_ = CreateMaybeMessage<::UsvLink::ParamItem>(arena, *from._impl_.msg_payload_.param_item_);
        break;
      case kParamReadRequest:
        _impl_.msg_payload_.param_read_request_ = CreateMaybeMessage<::UsvLink::ParamReadRequest>(arena, *from._impl_.msg_payload_.param_read_request_);
        break;
      case kParamReadResponse:
        _impl_.msg_payload_.param_read_response_ = CreateMaybeMessage<::UsvLink::ParamReadResponse>(arena, *from._impl_.msg_payload_.param_read_response_);
        break;
      case kParamWriteRequest:
        _impl_.msg_payload_.param_write_request_ = CreateMaybeMessage<::UsvLink::ParamWriteRequest>(arena, *from._impl_.msg_payload_.param_write_request_);
        break;
      case kParamWriteResponse:
        _impl_.msg_payload_.param_write_response_ = CreateMaybeMessage<::UsvLink::ParamWriteResponse>(arena, *from._impl_.msg_payload_.param_write_response_);
        break;
      case kMissionItem:
        _impl_.msg_payload_.mission_item_ = CreateMaybeMessage<::UsvLink::MissionItem>(arena, *from._impl_.msg_payload_.mission_item_);
        break;
      case kMissionDownloadRequest:
        _impl_.msg_payload_.mission_download_request_ = CreateMaybeMessage<::UsvLink::MissionDownloadRequest>(arena, *from._impl_.msg_payload_.mission_download_request_);
        break;
      case kMissionDownloadResponse:
        _impl_.msg_payload_.mission_download_response_ = CreateMaybeMessage<::UsvLink::MissionDownloadResponse>(arena, *from._impl_.msg_payload_.mission_download_response_);
        break;
      case kMissionUploadRequest:
        _impl_.msg_payload_.mission_upload_request_ = CreateMaybeMessage<::UsvLink::MissionUploadRequest>(arena, *from._impl_.msg_payload_.mission_upload_request_);
        break;
      case kMissionUploadResponse:
        _impl_.msg_payload_.mission_upload_response_ = CreateMaybeMessage<::UsvLink::MissionUploadResponse>(arena, *from._impl_.msg_payload_.mission_upload_response_);
        break;
      case kMissionCurrent:
        _impl_.msg_payload_.mission_current_ = CreateMaybeMessage<::UsvLink::MissionCurrent>(arena, *from._impl_.msg_payload_.mission_current_);
        break;
      case kMissionSetCurrent:
        _impl_.msg_payload_.mission_set_current_ = CreateMaybeMessage<::UsvLink::MissionSetCurrent>(arena, *from._impl_.msg_payload_.mission_set_current_);
        break;
      case kMissionClearRequest:
        _impl_.msg_payload_.mission_clear_request_ = CreateMaybeMessage<::UsvLink::MissionClearRequest>(arena, *from._impl_.msg_payload_.mission_clear_request_);
        break;
      case kMissionClearResponse:
        _impl_.msg_payload_.mission_clear_response_ = CreateMaybeMessage<::UsvLink::MissionClearResponse>(arena, *from._impl_.msg_payload_.mission_clear_response_);
        break;
      case kBatteryStatus:
        _impl_.msg_payload_.battery_status_ = CreateMaybeMessage<::UsvLink::BatteryStatus>(arena, *from._impl_.msg_payload_.battery_status_);
        break;
      case kCommand:
        _impl_.msg_payload_.command_ = CreateMaybeMessage<::UsvLink::Command>(arena, *from._impl_.msg_payload_.command_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:UsvLink.MessagePacket)
}
inline PROTOBUF_NDEBUG_INLINE MessagePacket::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        msg_payload_{},
        _oneof_case_{} {}

inline void MessagePacket::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, system_id_),
           0,
           offsetof(Impl_, msg_link_) -
               offsetof(Impl_, system_id_) +
               sizeof(Impl_::msg_link_));
}
MessagePacket::~MessagePacket() {
  // @@protoc_insertion_point(destructor:UsvLink.MessagePacket)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MessagePacket::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_msg_payload()) {
    clear_msg_payload();
  }
  _impl_.~Impl_();
}

void MessagePacket::clear_msg_payload() {
// @@protoc_insertion_point(one_of_clear_start:UsvLink.MessagePacket)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (msg_payload_case()) {
    case kHeartbeat: {
      if (GetArena() == nullptr) {
        delete _impl_.msg_payload_.heartbeat_;
      }
      break;
    }
    case kConnectRequest: {
      if (GetArena() == nullptr) {
        delete _impl_.msg_payload_.connect_request_;
      }
      break;
    }
    case kConnectResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.msg_payload_.connect_response_;
      }
      break;
    }
    case kDisconnectRequest: {
      if (GetArena() == nullptr) {
        delete _impl_.msg_payload_.disconnect_request_;
      }
      break;
    }
    case kDisconnectResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.msg_payload_.disconnect_response_;
      }
      break;
    }
    case kParamItem: {
      if (GetArena() == nullptr) {
        delete _impl_.msg_payload_.param_item_;
      }
      break;
    }
    case kParamReadRequest: {
      if (GetArena() == nullptr) {
        delete _impl_.msg_payload_.param_read_request_;
      }
      break;
    }
    case kParamReadResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.msg_payload_.param_read_response_;
      }
      break;
    }
    case kParamWriteRequest: {
      if (GetArena() == nullptr) {
        delete _impl_.msg_payload_.param_write_request_;
      }
      break;
    }
    case kParamWriteResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.msg_payload_.param_write_response_;
      }
      break;
    }
    case kMissionItem: {
      if (GetArena() == nullptr) {
        delete _impl_.msg_payload_.mission_item_;
      }
      break;
    }
    case kMissionDownloadRequest: {
      if (GetArena() == nullptr) {
        delete _impl_.msg_payload_.mission_download_request_;
      }
      break;
    }
    case kMissionDownloadResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.msg_payload_.mission_download_response_;
      }
      break;
    }
    case kMissionUploadRequest: {
      if (GetArena() == nullptr) {
        delete _impl_.msg_payload_.mission_upload_request_;
      }
      break;
    }
    case kMissionUploadResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.msg_payload_.mission_upload_response_;
      }
      break;
    }
    case kMissionCurrent: {
      if (GetArena() == nullptr) {
        delete _impl_.msg_payload_.mission_current_;
      }
      break;
    }
    case kMissionSetCurrent: {
      if (GetArena() == nullptr) {
        delete _impl_.msg_payload_.mission_set_current_;
      }
      break;
    }
    case kMissionClearRequest: {
      if (GetArena() == nullptr) {
        delete _impl_.msg_payload_.mission_clear_request_;
      }
      break;
    }
    case kMissionClearResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.msg_payload_.mission_clear_response_;
      }
      break;
    }
    case kBatteryStatus: {
      if (GetArena() == nullptr) {
        delete _impl_.msg_payload_.battery_status_;
      }
      break;
    }
    case kCommand: {
      if (GetArena() == nullptr) {
        delete _impl_.msg_payload_.command_;
      }
      break;
    }
    case MSG_PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MSG_PAYLOAD_NOT_SET;
}


PROTOBUF_NOINLINE void MessagePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:UsvLink.MessagePacket)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.system_id_ = 0;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.component_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.target_component_id_) -
        reinterpret_cast<char*>(&_impl_.component_id_)) + sizeof(_impl_.target_component_id_));
  }
  ::memset(&_impl_.time_ms_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.msg_link_) -
      reinterpret_cast<char*>(&_impl_.time_ms_)) + sizeof(_impl_.msg_link_));
  clear_msg_payload();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MessagePacket::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 29, 21, 0, 2> MessagePacket::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_._has_bits_),
    0, // no _extensions_
    29, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    3758096384,  // skipmap
    offsetof(decltype(_table_), field_entries),
    29,  // num_field_entries
    21,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MessagePacket_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .UsvLink.MsgLink msg_link = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MessagePacket, _impl_.msg_link_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.msg_link_)}},
    // int32 system_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MessagePacket, _impl_.system_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.system_id_)}},
    // optional int32 component_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MessagePacket, _impl_.component_id_), 0>(),
     {16, 0, 0, PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.component_id_)}},
    // optional int32 target_system_id = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MessagePacket, _impl_.target_system_id_), 1>(),
     {24, 1, 0, PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.target_system_id_)}},
    // optional int32 target_component_id = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MessagePacket, _impl_.target_component_id_), 2>(),
     {32, 2, 0, PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.target_component_id_)}},
    // .UsvLink.MsgId msg_id = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MessagePacket, _impl_.msg_id_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.msg_id_)}},
    // int64 time_ms = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MessagePacket, _impl_.time_ms_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.time_ms_)}},
    // .UsvLink.MsgSrc msg_src = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MessagePacket, _impl_.msg_src_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.msg_src_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 system_id = 1;
    {PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.system_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // optional int32 component_id = 2;
    {PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.component_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 target_system_id = 3;
    {PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.target_system_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 target_component_id = 4;
    {PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.target_component_id_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // .UsvLink.MsgId msg_id = 5;
    {PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.msg_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int64 time_ms = 6;
    {PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.time_ms_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .UsvLink.MsgSrc msg_src = 7;
    {PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.msg_src_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .UsvLink.MsgLink msg_link = 8;
    {PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.msg_link_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .UsvLink.Heartbeat heartbeat = 9;
    {PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.msg_payload_.heartbeat_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .UsvLink.ConnectRequest connect_request = 10;
    {PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.msg_payload_.connect_request_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvDefault)},
    // .UsvLink.ConnectResponse connect_response = 11;
    {PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.msg_payload_.connect_response_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .UsvLink.DisconnectRequest disconnect_request = 12;
    {PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.msg_payload_.disconnect_request_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvDefault)},
    // .UsvLink.DisconnectResponse disconnect_response = 13;
    {PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.msg_payload_.disconnect_response_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .UsvLink.ParamItem param_item = 14;
    {PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.msg_payload_.param_item_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .UsvLink.ParamReadRequest param_read_request = 15;
    {PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.msg_payload_.param_read_request_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .UsvLink.ParamReadResponse param_read_response = 16;
    {PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.msg_payload_.param_read_response_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .UsvLink.ParamWriteRequest param_write_request = 17;
    {PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.msg_payload_.param_write_request_), _Internal::kOneofCaseOffset + 0, 8,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .UsvLink.ParamWriteResponse param_write_response = 18;
    {PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.msg_payload_.param_write_response_), _Internal::kOneofCaseOffset + 0, 9,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .UsvLink.MissionItem mission_item = 19;
    {PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.msg_payload_.mission_item_), _Internal::kOneofCaseOffset + 0, 10,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .UsvLink.MissionDownloadRequest mission_download_request = 20;
    {PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.msg_payload_.mission_download_request_), _Internal::kOneofCaseOffset + 0, 11,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvDefault)},
    // .UsvLink.MissionDownloadResponse mission_download_response = 21;
    {PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.msg_payload_.mission_download_response_), _Internal::kOneofCaseOffset + 0, 12,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .UsvLink.MissionUploadRequest mission_upload_request = 22;
    {PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.msg_payload_.mission_upload_request_), _Internal::kOneofCaseOffset + 0, 13,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .UsvLink.MissionUploadResponse mission_upload_response = 23;
    {PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.msg_payload_.mission_upload_response_), _Internal::kOneofCaseOffset + 0, 14,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .UsvLink.MissionCurrent mission_current = 24;
    {PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.msg_payload_.mission_current_), _Internal::kOneofCaseOffset + 0, 15,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .UsvLink.MissionSetCurrent mission_set_current = 25;
    {PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.msg_payload_.mission_set_current_), _Internal::kOneofCaseOffset + 0, 16,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .UsvLink.MissionClearRequest mission_clear_request = 26;
    {PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.msg_payload_.mission_clear_request_), _Internal::kOneofCaseOffset + 0, 17,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvDefault)},
    // .UsvLink.MissionClearResponse mission_clear_response = 27;
    {PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.msg_payload_.mission_clear_response_), _Internal::kOneofCaseOffset + 0, 18,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .UsvLink.BatteryStatus battery_status = 28;
    {PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.msg_payload_.battery_status_), _Internal::kOneofCaseOffset + 0, 19,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .UsvLink.Command command = 29;
    {PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.msg_payload_.command_), _Internal::kOneofCaseOffset + 0, 20,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::UsvLink::Heartbeat>()},
    {::_pbi::FieldAuxDefaultMessage{}, &::UsvLink::_ConnectRequest_default_instance_},
    {::_pbi::TcParser::GetTable<::UsvLink::ConnectResponse>()},
    {::_pbi::FieldAuxDefaultMessage{}, &::UsvLink::_DisconnectRequest_default_instance_},
    {::_pbi::TcParser::GetTable<::UsvLink::DisconnectResponse>()},
    {::_pbi::TcParser::GetTable<::UsvLink::ParamItem>()},
    {::_pbi::TcParser::GetTable<::UsvLink::ParamReadRequest>()},
    {::_pbi::TcParser::GetTable<::UsvLink::ParamReadResponse>()},
    {::_pbi::TcParser::GetTable<::UsvLink::ParamWriteRequest>()},
    {::_pbi::TcParser::GetTable<::UsvLink::ParamWriteResponse>()},
    {::_pbi::TcParser::GetTable<::UsvLink::MissionItem>()},
    {::_pbi::FieldAuxDefaultMessage{}, &::UsvLink::_MissionDownloadRequest_default_instance_},
    {::_pbi::TcParser::GetTable<::UsvLink::MissionDownloadResponse>()},
    {::_pbi::TcParser::GetTable<::UsvLink::MissionUploadRequest>()},
    {::_pbi::TcParser::GetTable<::UsvLink::MissionUploadResponse>()},
    {::_pbi::TcParser::GetTable<::UsvLink::MissionCurrent>()},
    {::_pbi::TcParser::GetTable<::UsvLink::MissionSetCurrent>()},
    {::_pbi::FieldAuxDefaultMessage{}, &::UsvLink::_MissionClearRequest_default_instance_},
    {::_pbi::TcParser::GetTable<::UsvLink::MissionClearResponse>()},
    {::_pbi::TcParser::GetTable<::UsvLink::BatteryStatus>()},
    {::_pbi::TcParser::GetTable<::UsvLink::Command>()},
  }}, {{
  }},
};

::uint8_t* MessagePacket::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UsvLink.MessagePacket)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 system_id = 1;
  if (this->_internal_system_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_system_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 component_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_component_id(), target);
  }

  // optional int32 target_system_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_target_system_id(), target);
  }

  // optional int32 target_component_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_target_component_id(), target);
  }

  // .UsvLink.MsgId msg_id = 5;
  if (this->_internal_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_msg_id(), target);
  }

  // int64 time_ms = 6;
  if (this->_internal_time_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<6>(
            stream, this->_internal_time_ms(), target);
  }

  // .UsvLink.MsgSrc msg_src = 7;
  if (this->_internal_msg_src() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_msg_src(), target);
  }

  // .UsvLink.MsgLink msg_link = 8;
  if (this->_internal_msg_link() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        8, this->_internal_msg_link(), target);
  }

  switch (msg_payload_case()) {
    case kHeartbeat: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          9, _Internal::heartbeat(this),
          _Internal::heartbeat(this).GetCachedSize(), target, stream);
      break;
    }
    case kConnectRequest: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          10, _Internal::connect_request(this),
          _Internal::connect_request(this).GetCachedSize(), target, stream);
      break;
    }
    case kConnectResponse: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          11, _Internal::connect_response(this),
          _Internal::connect_response(this).GetCachedSize(), target, stream);
      break;
    }
    case kDisconnectRequest: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          12, _Internal::disconnect_request(this),
          _Internal::disconnect_request(this).GetCachedSize(), target, stream);
      break;
    }
    case kDisconnectResponse: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          13, _Internal::disconnect_response(this),
          _Internal::disconnect_response(this).GetCachedSize(), target, stream);
      break;
    }
    case kParamItem: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          14, _Internal::param_item(this),
          _Internal::param_item(this).GetCachedSize(), target, stream);
      break;
    }
    case kParamReadRequest: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          15, _Internal::param_read_request(this),
          _Internal::param_read_request(this).GetCachedSize(), target, stream);
      break;
    }
    case kParamReadResponse: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          16, _Internal::param_read_response(this),
          _Internal::param_read_response(this).GetCachedSize(), target, stream);
      break;
    }
    case kParamWriteRequest: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          17, _Internal::param_write_request(this),
          _Internal::param_write_request(this).GetCachedSize(), target, stream);
      break;
    }
    case kParamWriteResponse: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          18, _Internal::param_write_response(this),
          _Internal::param_write_response(this).GetCachedSize(), target, stream);
      break;
    }
    case kMissionItem: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          19, _Internal::mission_item(this),
          _Internal::mission_item(this).GetCachedSize(), target, stream);
      break;
    }
    case kMissionDownloadRequest: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          20, _Internal::mission_download_request(this),
          _Internal::mission_download_request(this).GetCachedSize(), target, stream);
      break;
    }
    case kMissionDownloadResponse: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          21, _Internal::mission_download_response(this),
          _Internal::mission_download_response(this).GetCachedSize(), target, stream);
      break;
    }
    case kMissionUploadRequest: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          22, _Internal::mission_upload_request(this),
          _Internal::mission_upload_request(this).GetCachedSize(), target, stream);
      break;
    }
    case kMissionUploadResponse: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          23, _Internal::mission_upload_response(this),
          _Internal::mission_upload_response(this).GetCachedSize(), target, stream);
      break;
    }
    case kMissionCurrent: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          24, _Internal::mission_current(this),
          _Internal::mission_current(this).GetCachedSize(), target, stream);
      break;
    }
    case kMissionSetCurrent: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          25, _Internal::mission_set_current(this),
          _Internal::mission_set_current(this).GetCachedSize(), target, stream);
      break;
    }
    case kMissionClearRequest: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          26, _Internal::mission_clear_request(this),
          _Internal::mission_clear_request(this).GetCachedSize(), target, stream);
      break;
    }
    case kMissionClearResponse: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          27, _Internal::mission_clear_response(this),
          _Internal::mission_clear_response(this).GetCachedSize(), target, stream);
      break;
    }
    case kBatteryStatus: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          28, _Internal::battery_status(this),
          _Internal::battery_status(this).GetCachedSize(), target, stream);
      break;
    }
    case kCommand: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          29, _Internal::command(this),
          _Internal::command(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UsvLink.MessagePacket)
  return target;
}

::size_t MessagePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UsvLink.MessagePacket)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 system_id = 1;
  if (this->_internal_system_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_system_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 component_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_component_id());
    }

    // optional int32 target_system_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_target_system_id());
    }

    // optional int32 target_component_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_target_component_id());
    }

  }
  // int64 time_ms = 6;
  if (this->_internal_time_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_time_ms());
  }

  // .UsvLink.MsgId msg_id = 5;
  if (this->_internal_msg_id() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_msg_id());
  }

  // .UsvLink.MsgSrc msg_src = 7;
  if (this->_internal_msg_src() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_msg_src());
  }

  // .UsvLink.MsgLink msg_link = 8;
  if (this->_internal_msg_link() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_msg_link());
  }

  switch (msg_payload_case()) {
    // .UsvLink.Heartbeat heartbeat = 9;
    case kHeartbeat: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.msg_payload_.heartbeat_);
      break;
    }
    // .UsvLink.ConnectRequest connect_request = 10;
    case kConnectRequest: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.msg_payload_.connect_request_);
      break;
    }
    // .UsvLink.ConnectResponse connect_response = 11;
    case kConnectResponse: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.msg_payload_.connect_response_);
      break;
    }
    // .UsvLink.DisconnectRequest disconnect_request = 12;
    case kDisconnectRequest: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.msg_payload_.disconnect_request_);
      break;
    }
    // .UsvLink.DisconnectResponse disconnect_response = 13;
    case kDisconnectResponse: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.msg_payload_.disconnect_response_);
      break;
    }
    // .UsvLink.ParamItem param_item = 14;
    case kParamItem: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.msg_payload_.param_item_);
      break;
    }
    // .UsvLink.ParamReadRequest param_read_request = 15;
    case kParamReadRequest: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.msg_payload_.param_read_request_);
      break;
    }
    // .UsvLink.ParamReadResponse param_read_response = 16;
    case kParamReadResponse: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.msg_payload_.param_read_response_);
      break;
    }
    // .UsvLink.ParamWriteRequest param_write_request = 17;
    case kParamWriteRequest: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.msg_payload_.param_write_request_);
      break;
    }
    // .UsvLink.ParamWriteResponse param_write_response = 18;
    case kParamWriteResponse: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.msg_payload_.param_write_response_);
      break;
    }
    // .UsvLink.MissionItem mission_item = 19;
    case kMissionItem: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.msg_payload_.mission_item_);
      break;
    }
    // .UsvLink.MissionDownloadRequest mission_download_request = 20;
    case kMissionDownloadRequest: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.msg_payload_.mission_download_request_);
      break;
    }
    // .UsvLink.MissionDownloadResponse mission_download_response = 21;
    case kMissionDownloadResponse: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.msg_payload_.mission_download_response_);
      break;
    }
    // .UsvLink.MissionUploadRequest mission_upload_request = 22;
    case kMissionUploadRequest: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.msg_payload_.mission_upload_request_);
      break;
    }
    // .UsvLink.MissionUploadResponse mission_upload_response = 23;
    case kMissionUploadResponse: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.msg_payload_.mission_upload_response_);
      break;
    }
    // .UsvLink.MissionCurrent mission_current = 24;
    case kMissionCurrent: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.msg_payload_.mission_current_);
      break;
    }
    // .UsvLink.MissionSetCurrent mission_set_current = 25;
    case kMissionSetCurrent: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.msg_payload_.mission_set_current_);
      break;
    }
    // .UsvLink.MissionClearRequest mission_clear_request = 26;
    case kMissionClearRequest: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.msg_payload_.mission_clear_request_);
      break;
    }
    // .UsvLink.MissionClearResponse mission_clear_response = 27;
    case kMissionClearResponse: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.msg_payload_.mission_clear_response_);
      break;
    }
    // .UsvLink.BatteryStatus battery_status = 28;
    case kBatteryStatus: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.msg_payload_.battery_status_);
      break;
    }
    // .UsvLink.Command command = 29;
    case kCommand: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.msg_payload_.command_);
      break;
    }
    case MSG_PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MessagePacket::_class_data_ = {
    MessagePacket::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* MessagePacket::GetClassData() const {
  return &_class_data_;
}

void MessagePacket::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MessagePacket*>(&to_msg);
  auto& from = static_cast<const MessagePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UsvLink.MessagePacket)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_system_id() != 0) {
    _this->_internal_set_system_id(from._internal_system_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.component_id_ = from._impl_.component_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.target_system_id_ = from._impl_.target_system_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.target_component_id_ = from._impl_.target_component_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_time_ms() != 0) {
    _this->_internal_set_time_ms(from._internal_time_ms());
  }
  if (from._internal_msg_id() != 0) {
    _this->_internal_set_msg_id(from._internal_msg_id());
  }
  if (from._internal_msg_src() != 0) {
    _this->_internal_set_msg_src(from._internal_msg_src());
  }
  if (from._internal_msg_link() != 0) {
    _this->_internal_set_msg_link(from._internal_msg_link());
  }
  switch (from.msg_payload_case()) {
    case kHeartbeat: {
      _this->_internal_mutable_heartbeat()->::UsvLink::Heartbeat::MergeFrom(
          from._internal_heartbeat());
      break;
    }
    case kConnectRequest: {
      _this->_internal_mutable_connect_request()->::UsvLink::ConnectRequest::MergeFrom(
          from._internal_connect_request());
      break;
    }
    case kConnectResponse: {
      _this->_internal_mutable_connect_response()->::UsvLink::ConnectResponse::MergeFrom(
          from._internal_connect_response());
      break;
    }
    case kDisconnectRequest: {
      _this->_internal_mutable_disconnect_request()->::UsvLink::DisconnectRequest::MergeFrom(
          from._internal_disconnect_request());
      break;
    }
    case kDisconnectResponse: {
      _this->_internal_mutable_disconnect_response()->::UsvLink::DisconnectResponse::MergeFrom(
          from._internal_disconnect_response());
      break;
    }
    case kParamItem: {
      _this->_internal_mutable_param_item()->::UsvLink::ParamItem::MergeFrom(
          from._internal_param_item());
      break;
    }
    case kParamReadRequest: {
      _this->_internal_mutable_param_read_request()->::UsvLink::ParamReadRequest::MergeFrom(
          from._internal_param_read_request());
      break;
    }
    case kParamReadResponse: {
      _this->_internal_mutable_param_read_response()->::UsvLink::ParamReadResponse::MergeFrom(
          from._internal_param_read_response());
      break;
    }
    case kParamWriteRequest: {
      _this->_internal_mutable_param_write_request()->::UsvLink::ParamWriteRequest::MergeFrom(
          from._internal_param_write_request());
      break;
    }
    case kParamWriteResponse: {
      _this->_internal_mutable_param_write_response()->::UsvLink::ParamWriteResponse::MergeFrom(
          from._internal_param_write_response());
      break;
    }
    case kMissionItem: {
      _this->_internal_mutable_mission_item()->::UsvLink::MissionItem::MergeFrom(
          from._internal_mission_item());
      break;
    }
    case kMissionDownloadRequest: {
      _this->_internal_mutable_mission_download_request()->::UsvLink::MissionDownloadRequest::MergeFrom(
          from._internal_mission_download_request());
      break;
    }
    case kMissionDownloadResponse: {
      _this->_internal_mutable_mission_download_response()->::UsvLink::MissionDownloadResponse::MergeFrom(
          from._internal_mission_download_response());
      break;
    }
    case kMissionUploadRequest: {
      _this->_internal_mutable_mission_upload_request()->::UsvLink::MissionUploadRequest::MergeFrom(
          from._internal_mission_upload_request());
      break;
    }
    case kMissionUploadResponse: {
      _this->_internal_mutable_mission_upload_response()->::UsvLink::MissionUploadResponse::MergeFrom(
          from._internal_mission_upload_response());
      break;
    }
    case kMissionCurrent: {
      _this->_internal_mutable_mission_current()->::UsvLink::MissionCurrent::MergeFrom(
          from._internal_mission_current());
      break;
    }
    case kMissionSetCurrent: {
      _this->_internal_mutable_mission_set_current()->::UsvLink::MissionSetCurrent::MergeFrom(
          from._internal_mission_set_current());
      break;
    }
    case kMissionClearRequest: {
      _this->_internal_mutable_mission_clear_request()->::UsvLink::MissionClearRequest::MergeFrom(
          from._internal_mission_clear_request());
      break;
    }
    case kMissionClearResponse: {
      _this->_internal_mutable_mission_clear_response()->::UsvLink::MissionClearResponse::MergeFrom(
          from._internal_mission_clear_response());
      break;
    }
    case kBatteryStatus: {
      _this->_internal_mutable_battery_status()->::UsvLink::BatteryStatus::MergeFrom(
          from._internal_battery_status());
      break;
    }
    case kCommand: {
      _this->_internal_mutable_command()->::UsvLink::Command::MergeFrom(
          from._internal_command());
      break;
    }
    case MSG_PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MessagePacket::CopyFrom(const MessagePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UsvLink.MessagePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MessagePacket::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MessagePacket::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MessagePacket::InternalSwap(MessagePacket* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.msg_link_)
      + sizeof(MessagePacket::_impl_.msg_link_)
      - PROTOBUF_FIELD_OFFSET(MessagePacket, _impl_.system_id_)>(
          reinterpret_cast<char*>(&_impl_.system_id_),
          reinterpret_cast<char*>(&other->_impl_.system_id_));
  swap(_impl_.msg_payload_, other->_impl_.msg_payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata MessagePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_link_5fprotocol_2eproto_getter, &descriptor_table_link_5fprotocol_2eproto_once,
      file_level_metadata_link_5fprotocol_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace UsvLink
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
