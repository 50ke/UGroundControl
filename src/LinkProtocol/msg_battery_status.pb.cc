// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_battery_status.proto

#include "msg_battery_status.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace UsvLink {

inline constexpr BatteryStatus::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_{0},
        temperature_{0},
        voltage_{0},
        capacity_consumed_{0},
        capacity_remaining_{0},
        percent_remaining_{0},
        status_flags_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR BatteryStatus::BatteryStatus(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct BatteryStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatteryStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatteryStatusDefaultTypeInternal() {}
  union {
    BatteryStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatteryStatusDefaultTypeInternal _BatteryStatus_default_instance_;
}  // namespace UsvLink
static ::_pb::Metadata file_level_metadata_msg_5fbattery_5fstatus_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_msg_5fbattery_5fstatus_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_msg_5fbattery_5fstatus_2eproto = nullptr;
const ::uint32_t TableStruct_msg_5fbattery_5fstatus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::UsvLink::BatteryStatus, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::UsvLink::BatteryStatus, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::UsvLink::BatteryStatus, _impl_.temperature_),
    PROTOBUF_FIELD_OFFSET(::UsvLink::BatteryStatus, _impl_.voltage_),
    PROTOBUF_FIELD_OFFSET(::UsvLink::BatteryStatus, _impl_.capacity_consumed_),
    PROTOBUF_FIELD_OFFSET(::UsvLink::BatteryStatus, _impl_.capacity_remaining_),
    PROTOBUF_FIELD_OFFSET(::UsvLink::BatteryStatus, _impl_.percent_remaining_),
    PROTOBUF_FIELD_OFFSET(::UsvLink::BatteryStatus, _impl_.status_flags_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::UsvLink::BatteryStatus)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::UsvLink::_BatteryStatus_default_instance_._instance,
};
const char descriptor_table_protodef_msg_5fbattery_5fstatus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\030msg_battery_status.proto\022\007UsvLink\"\251\001\n\r"
    "BatteryStatus\022\n\n\002id\030\001 \001(\005\022\023\n\013temperature"
    "\030\002 \001(\005\022\017\n\007voltage\030\003 \001(\002\022\031\n\021capacity_cons"
    "umed\030\004 \001(\002\022\032\n\022capacity_remaining\030\005 \001(\002\022\031"
    "\n\021percent_remaining\030\006 \001(\002\022\024\n\014status_flag"
    "s\030\007 \001(\005b\006proto3"
};
static ::absl::once_flag descriptor_table_msg_5fbattery_5fstatus_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_msg_5fbattery_5fstatus_2eproto = {
    false,
    false,
    215,
    descriptor_table_protodef_msg_5fbattery_5fstatus_2eproto,
    "msg_battery_status.proto",
    &descriptor_table_msg_5fbattery_5fstatus_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_msg_5fbattery_5fstatus_2eproto::offsets,
    file_level_metadata_msg_5fbattery_5fstatus_2eproto,
    file_level_enum_descriptors_msg_5fbattery_5fstatus_2eproto,
    file_level_service_descriptors_msg_5fbattery_5fstatus_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_msg_5fbattery_5fstatus_2eproto_getter() {
  return &descriptor_table_msg_5fbattery_5fstatus_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_msg_5fbattery_5fstatus_2eproto(&descriptor_table_msg_5fbattery_5fstatus_2eproto);
namespace UsvLink {
// ===================================================================

class BatteryStatus::_Internal {
 public:
};

BatteryStatus::BatteryStatus(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:UsvLink.BatteryStatus)
}
BatteryStatus::BatteryStatus(
    ::google::protobuf::Arena* arena, const BatteryStatus& from)
    : BatteryStatus(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE BatteryStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void BatteryStatus::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, status_flags_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::status_flags_));
}
BatteryStatus::~BatteryStatus() {
  // @@protoc_insertion_point(destructor:UsvLink.BatteryStatus)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BatteryStatus::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void BatteryStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:UsvLink.BatteryStatus)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.status_flags_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.status_flags_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BatteryStatus::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 0, 2> BatteryStatus::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_BatteryStatus_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BatteryStatus, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(BatteryStatus, _impl_.id_)}},
    // int32 temperature = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BatteryStatus, _impl_.temperature_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(BatteryStatus, _impl_.temperature_)}},
    // float voltage = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(BatteryStatus, _impl_.voltage_)}},
    // float capacity_consumed = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(BatteryStatus, _impl_.capacity_consumed_)}},
    // float capacity_remaining = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(BatteryStatus, _impl_.capacity_remaining_)}},
    // float percent_remaining = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(BatteryStatus, _impl_.percent_remaining_)}},
    // int32 status_flags = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BatteryStatus, _impl_.status_flags_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(BatteryStatus, _impl_.status_flags_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(BatteryStatus, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 temperature = 2;
    {PROTOBUF_FIELD_OFFSET(BatteryStatus, _impl_.temperature_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float voltage = 3;
    {PROTOBUF_FIELD_OFFSET(BatteryStatus, _impl_.voltage_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float capacity_consumed = 4;
    {PROTOBUF_FIELD_OFFSET(BatteryStatus, _impl_.capacity_consumed_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float capacity_remaining = 5;
    {PROTOBUF_FIELD_OFFSET(BatteryStatus, _impl_.capacity_remaining_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float percent_remaining = 6;
    {PROTOBUF_FIELD_OFFSET(BatteryStatus, _impl_.percent_remaining_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 status_flags = 7;
    {PROTOBUF_FIELD_OFFSET(BatteryStatus, _impl_.status_flags_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* BatteryStatus::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UsvLink.BatteryStatus)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // int32 temperature = 2;
  if (this->_internal_temperature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_temperature(), target);
  }

  // float voltage = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_voltage = this->_internal_voltage();
  ::uint32_t raw_voltage;
  memcpy(&raw_voltage, &tmp_voltage, sizeof(tmp_voltage));
  if (raw_voltage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_voltage(), target);
  }

  // float capacity_consumed = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_capacity_consumed = this->_internal_capacity_consumed();
  ::uint32_t raw_capacity_consumed;
  memcpy(&raw_capacity_consumed, &tmp_capacity_consumed, sizeof(tmp_capacity_consumed));
  if (raw_capacity_consumed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_capacity_consumed(), target);
  }

  // float capacity_remaining = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_capacity_remaining = this->_internal_capacity_remaining();
  ::uint32_t raw_capacity_remaining;
  memcpy(&raw_capacity_remaining, &tmp_capacity_remaining, sizeof(tmp_capacity_remaining));
  if (raw_capacity_remaining != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_capacity_remaining(), target);
  }

  // float percent_remaining = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_percent_remaining = this->_internal_percent_remaining();
  ::uint32_t raw_percent_remaining;
  memcpy(&raw_percent_remaining, &tmp_percent_remaining, sizeof(tmp_percent_remaining));
  if (raw_percent_remaining != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_percent_remaining(), target);
  }

  // int32 status_flags = 7;
  if (this->_internal_status_flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_status_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UsvLink.BatteryStatus)
  return target;
}

::size_t BatteryStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UsvLink.BatteryStatus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // int32 temperature = 2;
  if (this->_internal_temperature() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_temperature());
  }

  // float voltage = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_voltage = this->_internal_voltage();
  ::uint32_t raw_voltage;
  memcpy(&raw_voltage, &tmp_voltage, sizeof(tmp_voltage));
  if (raw_voltage != 0) {
    total_size += 5;
  }

  // float capacity_consumed = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_capacity_consumed = this->_internal_capacity_consumed();
  ::uint32_t raw_capacity_consumed;
  memcpy(&raw_capacity_consumed, &tmp_capacity_consumed, sizeof(tmp_capacity_consumed));
  if (raw_capacity_consumed != 0) {
    total_size += 5;
  }

  // float capacity_remaining = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_capacity_remaining = this->_internal_capacity_remaining();
  ::uint32_t raw_capacity_remaining;
  memcpy(&raw_capacity_remaining, &tmp_capacity_remaining, sizeof(tmp_capacity_remaining));
  if (raw_capacity_remaining != 0) {
    total_size += 5;
  }

  // float percent_remaining = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_percent_remaining = this->_internal_percent_remaining();
  ::uint32_t raw_percent_remaining;
  memcpy(&raw_percent_remaining, &tmp_percent_remaining, sizeof(tmp_percent_remaining));
  if (raw_percent_remaining != 0) {
    total_size += 5;
  }

  // int32 status_flags = 7;
  if (this->_internal_status_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_status_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BatteryStatus::_class_data_ = {
    BatteryStatus::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* BatteryStatus::GetClassData() const {
  return &_class_data_;
}

void BatteryStatus::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BatteryStatus*>(&to_msg);
  auto& from = static_cast<const BatteryStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UsvLink.BatteryStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_temperature() != 0) {
    _this->_internal_set_temperature(from._internal_temperature());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_voltage = from._internal_voltage();
  ::uint32_t raw_voltage;
  memcpy(&raw_voltage, &tmp_voltage, sizeof(tmp_voltage));
  if (raw_voltage != 0) {
    _this->_internal_set_voltage(from._internal_voltage());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_capacity_consumed = from._internal_capacity_consumed();
  ::uint32_t raw_capacity_consumed;
  memcpy(&raw_capacity_consumed, &tmp_capacity_consumed, sizeof(tmp_capacity_consumed));
  if (raw_capacity_consumed != 0) {
    _this->_internal_set_capacity_consumed(from._internal_capacity_consumed());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_capacity_remaining = from._internal_capacity_remaining();
  ::uint32_t raw_capacity_remaining;
  memcpy(&raw_capacity_remaining, &tmp_capacity_remaining, sizeof(tmp_capacity_remaining));
  if (raw_capacity_remaining != 0) {
    _this->_internal_set_capacity_remaining(from._internal_capacity_remaining());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_percent_remaining = from._internal_percent_remaining();
  ::uint32_t raw_percent_remaining;
  memcpy(&raw_percent_remaining, &tmp_percent_remaining, sizeof(tmp_percent_remaining));
  if (raw_percent_remaining != 0) {
    _this->_internal_set_percent_remaining(from._internal_percent_remaining());
  }
  if (from._internal_status_flags() != 0) {
    _this->_internal_set_status_flags(from._internal_status_flags());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BatteryStatus::CopyFrom(const BatteryStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UsvLink.BatteryStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BatteryStatus::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* BatteryStatus::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void BatteryStatus::InternalSwap(BatteryStatus* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatteryStatus, _impl_.status_flags_)
      + sizeof(BatteryStatus::_impl_.status_flags_)
      - PROTOBUF_FIELD_OFFSET(BatteryStatus, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata BatteryStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fbattery_5fstatus_2eproto_getter, &descriptor_table_msg_5fbattery_5fstatus_2eproto_once,
      file_level_metadata_msg_5fbattery_5fstatus_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace UsvLink
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
