// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_battery_status.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_5fbattery_5fstatus_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_msg_5fbattery_5fstatus_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_msg_5fbattery_5fstatus_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_5fbattery_5fstatus_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_msg_5fbattery_5fstatus_2eproto;
namespace UsvLink {
class BatteryStatus;
struct BatteryStatusDefaultTypeInternal;
extern BatteryStatusDefaultTypeInternal _BatteryStatus_default_instance_;
}  // namespace UsvLink
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace UsvLink {

// ===================================================================


// -------------------------------------------------------------------

class BatteryStatus final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UsvLink.BatteryStatus) */ {
 public:
  inline BatteryStatus() : BatteryStatus(nullptr) {}
  ~BatteryStatus() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BatteryStatus(::google::protobuf::internal::ConstantInitialized);

  inline BatteryStatus(const BatteryStatus& from)
      : BatteryStatus(nullptr, from) {}
  BatteryStatus(BatteryStatus&& from) noexcept
    : BatteryStatus() {
    *this = ::std::move(from);
  }

  inline BatteryStatus& operator=(const BatteryStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatteryStatus& operator=(BatteryStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatteryStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatteryStatus* internal_default_instance() {
    return reinterpret_cast<const BatteryStatus*>(
               &_BatteryStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BatteryStatus& a, BatteryStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(BatteryStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatteryStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatteryStatus* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatteryStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BatteryStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BatteryStatus& from) {
    BatteryStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BatteryStatus* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "UsvLink.BatteryStatus";
  }
  protected:
  explicit BatteryStatus(::google::protobuf::Arena* arena);
  BatteryStatus(::google::protobuf::Arena* arena, const BatteryStatus& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTemperatureFieldNumber = 2,
    kVoltageFieldNumber = 3,
    kCapacityConsumedFieldNumber = 4,
    kCapacityRemainingFieldNumber = 5,
    kPercentRemainingFieldNumber = 6,
    kStatusFlagsFieldNumber = 7,
  };
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 temperature = 2;
  void clear_temperature() ;
  ::int32_t temperature() const;
  void set_temperature(::int32_t value);

  private:
  ::int32_t _internal_temperature() const;
  void _internal_set_temperature(::int32_t value);

  public:
  // float voltage = 3;
  void clear_voltage() ;
  float voltage() const;
  void set_voltage(float value);

  private:
  float _internal_voltage() const;
  void _internal_set_voltage(float value);

  public:
  // float capacity_consumed = 4;
  void clear_capacity_consumed() ;
  float capacity_consumed() const;
  void set_capacity_consumed(float value);

  private:
  float _internal_capacity_consumed() const;
  void _internal_set_capacity_consumed(float value);

  public:
  // float capacity_remaining = 5;
  void clear_capacity_remaining() ;
  float capacity_remaining() const;
  void set_capacity_remaining(float value);

  private:
  float _internal_capacity_remaining() const;
  void _internal_set_capacity_remaining(float value);

  public:
  // float percent_remaining = 6;
  void clear_percent_remaining() ;
  float percent_remaining() const;
  void set_percent_remaining(float value);

  private:
  float _internal_percent_remaining() const;
  void _internal_set_percent_remaining(float value);

  public:
  // int32 status_flags = 7;
  void clear_status_flags() ;
  ::int32_t status_flags() const;
  void set_status_flags(::int32_t value);

  private:
  ::int32_t _internal_status_flags() const;
  void _internal_set_status_flags(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:UsvLink.BatteryStatus)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t id_;
    ::int32_t temperature_;
    float voltage_;
    float capacity_consumed_;
    float capacity_remaining_;
    float percent_remaining_;
    ::int32_t status_flags_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fbattery_5fstatus_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BatteryStatus

// int32 id = 1;
inline void BatteryStatus::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = 0;
}
inline ::int32_t BatteryStatus::id() const {
  // @@protoc_insertion_point(field_get:UsvLink.BatteryStatus.id)
  return _internal_id();
}
inline void BatteryStatus::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:UsvLink.BatteryStatus.id)
}
inline ::int32_t BatteryStatus::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void BatteryStatus::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// int32 temperature = 2;
inline void BatteryStatus::clear_temperature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.temperature_ = 0;
}
inline ::int32_t BatteryStatus::temperature() const {
  // @@protoc_insertion_point(field_get:UsvLink.BatteryStatus.temperature)
  return _internal_temperature();
}
inline void BatteryStatus::set_temperature(::int32_t value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:UsvLink.BatteryStatus.temperature)
}
inline ::int32_t BatteryStatus::_internal_temperature() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.temperature_;
}
inline void BatteryStatus::_internal_set_temperature(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.temperature_ = value;
}

// float voltage = 3;
inline void BatteryStatus::clear_voltage() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.voltage_ = 0;
}
inline float BatteryStatus::voltage() const {
  // @@protoc_insertion_point(field_get:UsvLink.BatteryStatus.voltage)
  return _internal_voltage();
}
inline void BatteryStatus::set_voltage(float value) {
  _internal_set_voltage(value);
  // @@protoc_insertion_point(field_set:UsvLink.BatteryStatus.voltage)
}
inline float BatteryStatus::_internal_voltage() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.voltage_;
}
inline void BatteryStatus::_internal_set_voltage(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.voltage_ = value;
}

// float capacity_consumed = 4;
inline void BatteryStatus::clear_capacity_consumed() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.capacity_consumed_ = 0;
}
inline float BatteryStatus::capacity_consumed() const {
  // @@protoc_insertion_point(field_get:UsvLink.BatteryStatus.capacity_consumed)
  return _internal_capacity_consumed();
}
inline void BatteryStatus::set_capacity_consumed(float value) {
  _internal_set_capacity_consumed(value);
  // @@protoc_insertion_point(field_set:UsvLink.BatteryStatus.capacity_consumed)
}
inline float BatteryStatus::_internal_capacity_consumed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.capacity_consumed_;
}
inline void BatteryStatus::_internal_set_capacity_consumed(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.capacity_consumed_ = value;
}

// float capacity_remaining = 5;
inline void BatteryStatus::clear_capacity_remaining() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.capacity_remaining_ = 0;
}
inline float BatteryStatus::capacity_remaining() const {
  // @@protoc_insertion_point(field_get:UsvLink.BatteryStatus.capacity_remaining)
  return _internal_capacity_remaining();
}
inline void BatteryStatus::set_capacity_remaining(float value) {
  _internal_set_capacity_remaining(value);
  // @@protoc_insertion_point(field_set:UsvLink.BatteryStatus.capacity_remaining)
}
inline float BatteryStatus::_internal_capacity_remaining() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.capacity_remaining_;
}
inline void BatteryStatus::_internal_set_capacity_remaining(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.capacity_remaining_ = value;
}

// float percent_remaining = 6;
inline void BatteryStatus::clear_percent_remaining() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.percent_remaining_ = 0;
}
inline float BatteryStatus::percent_remaining() const {
  // @@protoc_insertion_point(field_get:UsvLink.BatteryStatus.percent_remaining)
  return _internal_percent_remaining();
}
inline void BatteryStatus::set_percent_remaining(float value) {
  _internal_set_percent_remaining(value);
  // @@protoc_insertion_point(field_set:UsvLink.BatteryStatus.percent_remaining)
}
inline float BatteryStatus::_internal_percent_remaining() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.percent_remaining_;
}
inline void BatteryStatus::_internal_set_percent_remaining(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.percent_remaining_ = value;
}

// int32 status_flags = 7;
inline void BatteryStatus::clear_status_flags() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_flags_ = 0;
}
inline ::int32_t BatteryStatus::status_flags() const {
  // @@protoc_insertion_point(field_get:UsvLink.BatteryStatus.status_flags)
  return _internal_status_flags();
}
inline void BatteryStatus::set_status_flags(::int32_t value) {
  _internal_set_status_flags(value);
  // @@protoc_insertion_point(field_set:UsvLink.BatteryStatus.status_flags)
}
inline ::int32_t BatteryStatus::_internal_status_flags() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.status_flags_;
}
inline void BatteryStatus::_internal_set_status_flags(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_flags_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace UsvLink


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_msg_5fbattery_5fstatus_2eproto_2epb_2eh
