// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_command.proto

#include "msg_command.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace UsvLink {

inline constexpr Command::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : cmd_id_{static_cast< ::UsvLink::CmdId >(0)},
        param1_{0},
        param2_{0},
        param3_{0},
        param4_{0},
        param5_{0},
        param6_{0},
        param7_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Command::Command(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandDefaultTypeInternal() {}
  union {
    Command _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandDefaultTypeInternal _Command_default_instance_;
}  // namespace UsvLink
static ::_pb::Metadata file_level_metadata_msg_5fcommand_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_msg_5fcommand_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_msg_5fcommand_2eproto = nullptr;
const ::uint32_t TableStruct_msg_5fcommand_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::UsvLink::Command, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::UsvLink::Command, _impl_.cmd_id_),
    PROTOBUF_FIELD_OFFSET(::UsvLink::Command, _impl_.param1_),
    PROTOBUF_FIELD_OFFSET(::UsvLink::Command, _impl_.param2_),
    PROTOBUF_FIELD_OFFSET(::UsvLink::Command, _impl_.param3_),
    PROTOBUF_FIELD_OFFSET(::UsvLink::Command, _impl_.param4_),
    PROTOBUF_FIELD_OFFSET(::UsvLink::Command, _impl_.param5_),
    PROTOBUF_FIELD_OFFSET(::UsvLink::Command, _impl_.param6_),
    PROTOBUF_FIELD_OFFSET(::UsvLink::Command, _impl_.param7_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::UsvLink::Command)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::UsvLink::_Command_default_instance_._instance,
};
const char descriptor_table_protodef_msg_5fcommand_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\021msg_command.proto\022\007UsvLink\032\016msg_enum.p"
    "roto\"\231\001\n\007Command\022\036\n\006cmd_id\030\001 \001(\0162\016.UsvLi"
    "nk.CmdId\022\016\n\006param1\030\002 \001(\002\022\016\n\006param2\030\003 \001(\002"
    "\022\016\n\006param3\030\004 \001(\002\022\016\n\006param4\030\005 \001(\002\022\016\n\006para"
    "m5\030\006 \001(\002\022\016\n\006param6\030\007 \001(\002\022\016\n\006param7\030\010 \001(\002"
    "b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_msg_5fcommand_2eproto_deps[1] =
    {
        &::descriptor_table_msg_5fenum_2eproto,
};
static ::absl::once_flag descriptor_table_msg_5fcommand_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_msg_5fcommand_2eproto = {
    false,
    false,
    208,
    descriptor_table_protodef_msg_5fcommand_2eproto,
    "msg_command.proto",
    &descriptor_table_msg_5fcommand_2eproto_once,
    descriptor_table_msg_5fcommand_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_msg_5fcommand_2eproto::offsets,
    file_level_metadata_msg_5fcommand_2eproto,
    file_level_enum_descriptors_msg_5fcommand_2eproto,
    file_level_service_descriptors_msg_5fcommand_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_msg_5fcommand_2eproto_getter() {
  return &descriptor_table_msg_5fcommand_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_msg_5fcommand_2eproto(&descriptor_table_msg_5fcommand_2eproto);
namespace UsvLink {
// ===================================================================

class Command::_Internal {
 public:
};

Command::Command(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:UsvLink.Command)
}
Command::Command(
    ::google::protobuf::Arena* arena, const Command& from)
    : Command(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Command::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Command::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, cmd_id_),
           0,
           offsetof(Impl_, param7_) -
               offsetof(Impl_, cmd_id_) +
               sizeof(Impl_::param7_));
}
Command::~Command() {
  // @@protoc_insertion_point(destructor:UsvLink.Command)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Command::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:UsvLink.Command)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.cmd_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.param7_) -
      reinterpret_cast<char*>(&_impl_.cmd_id_)) + sizeof(_impl_.param7_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Command::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 0, 0, 2> Command::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Command_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float param7 = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 63, 0, PROTOBUF_FIELD_OFFSET(Command, _impl_.param7_)}},
    // .UsvLink.CmdId cmd_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Command, _impl_.cmd_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Command, _impl_.cmd_id_)}},
    // float param1 = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Command, _impl_.param1_)}},
    // float param2 = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Command, _impl_.param2_)}},
    // float param3 = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(Command, _impl_.param3_)}},
    // float param4 = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(Command, _impl_.param4_)}},
    // float param5 = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(Command, _impl_.param5_)}},
    // float param6 = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(Command, _impl_.param6_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .UsvLink.CmdId cmd_id = 1;
    {PROTOBUF_FIELD_OFFSET(Command, _impl_.cmd_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // float param1 = 2;
    {PROTOBUF_FIELD_OFFSET(Command, _impl_.param1_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float param2 = 3;
    {PROTOBUF_FIELD_OFFSET(Command, _impl_.param2_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float param3 = 4;
    {PROTOBUF_FIELD_OFFSET(Command, _impl_.param3_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float param4 = 5;
    {PROTOBUF_FIELD_OFFSET(Command, _impl_.param4_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float param5 = 6;
    {PROTOBUF_FIELD_OFFSET(Command, _impl_.param5_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float param6 = 7;
    {PROTOBUF_FIELD_OFFSET(Command, _impl_.param6_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float param7 = 8;
    {PROTOBUF_FIELD_OFFSET(Command, _impl_.param7_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Command::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UsvLink.Command)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .UsvLink.CmdId cmd_id = 1;
  if (this->_internal_cmd_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_cmd_id(), target);
  }

  // float param1 = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_param1 = this->_internal_param1();
  ::uint32_t raw_param1;
  memcpy(&raw_param1, &tmp_param1, sizeof(tmp_param1));
  if (raw_param1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_param1(), target);
  }

  // float param2 = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_param2 = this->_internal_param2();
  ::uint32_t raw_param2;
  memcpy(&raw_param2, &tmp_param2, sizeof(tmp_param2));
  if (raw_param2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_param2(), target);
  }

  // float param3 = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_param3 = this->_internal_param3();
  ::uint32_t raw_param3;
  memcpy(&raw_param3, &tmp_param3, sizeof(tmp_param3));
  if (raw_param3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_param3(), target);
  }

  // float param4 = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_param4 = this->_internal_param4();
  ::uint32_t raw_param4;
  memcpy(&raw_param4, &tmp_param4, sizeof(tmp_param4));
  if (raw_param4 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_param4(), target);
  }

  // float param5 = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_param5 = this->_internal_param5();
  ::uint32_t raw_param5;
  memcpy(&raw_param5, &tmp_param5, sizeof(tmp_param5));
  if (raw_param5 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_param5(), target);
  }

  // float param6 = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_param6 = this->_internal_param6();
  ::uint32_t raw_param6;
  memcpy(&raw_param6, &tmp_param6, sizeof(tmp_param6));
  if (raw_param6 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_param6(), target);
  }

  // float param7 = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_param7 = this->_internal_param7();
  ::uint32_t raw_param7;
  memcpy(&raw_param7, &tmp_param7, sizeof(tmp_param7));
  if (raw_param7 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        8, this->_internal_param7(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UsvLink.Command)
  return target;
}

::size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UsvLink.Command)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .UsvLink.CmdId cmd_id = 1;
  if (this->_internal_cmd_id() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_cmd_id());
  }

  // float param1 = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_param1 = this->_internal_param1();
  ::uint32_t raw_param1;
  memcpy(&raw_param1, &tmp_param1, sizeof(tmp_param1));
  if (raw_param1 != 0) {
    total_size += 5;
  }

  // float param2 = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_param2 = this->_internal_param2();
  ::uint32_t raw_param2;
  memcpy(&raw_param2, &tmp_param2, sizeof(tmp_param2));
  if (raw_param2 != 0) {
    total_size += 5;
  }

  // float param3 = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_param3 = this->_internal_param3();
  ::uint32_t raw_param3;
  memcpy(&raw_param3, &tmp_param3, sizeof(tmp_param3));
  if (raw_param3 != 0) {
    total_size += 5;
  }

  // float param4 = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_param4 = this->_internal_param4();
  ::uint32_t raw_param4;
  memcpy(&raw_param4, &tmp_param4, sizeof(tmp_param4));
  if (raw_param4 != 0) {
    total_size += 5;
  }

  // float param5 = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_param5 = this->_internal_param5();
  ::uint32_t raw_param5;
  memcpy(&raw_param5, &tmp_param5, sizeof(tmp_param5));
  if (raw_param5 != 0) {
    total_size += 5;
  }

  // float param6 = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_param6 = this->_internal_param6();
  ::uint32_t raw_param6;
  memcpy(&raw_param6, &tmp_param6, sizeof(tmp_param6));
  if (raw_param6 != 0) {
    total_size += 5;
  }

  // float param7 = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_param7 = this->_internal_param7();
  ::uint32_t raw_param7;
  memcpy(&raw_param7, &tmp_param7, sizeof(tmp_param7));
  if (raw_param7 != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Command::_class_data_ = {
    Command::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Command::GetClassData() const {
  return &_class_data_;
}

void Command::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Command*>(&to_msg);
  auto& from = static_cast<const Command&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UsvLink.Command)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cmd_id() != 0) {
    _this->_internal_set_cmd_id(from._internal_cmd_id());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_param1 = from._internal_param1();
  ::uint32_t raw_param1;
  memcpy(&raw_param1, &tmp_param1, sizeof(tmp_param1));
  if (raw_param1 != 0) {
    _this->_internal_set_param1(from._internal_param1());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_param2 = from._internal_param2();
  ::uint32_t raw_param2;
  memcpy(&raw_param2, &tmp_param2, sizeof(tmp_param2));
  if (raw_param2 != 0) {
    _this->_internal_set_param2(from._internal_param2());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_param3 = from._internal_param3();
  ::uint32_t raw_param3;
  memcpy(&raw_param3, &tmp_param3, sizeof(tmp_param3));
  if (raw_param3 != 0) {
    _this->_internal_set_param3(from._internal_param3());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_param4 = from._internal_param4();
  ::uint32_t raw_param4;
  memcpy(&raw_param4, &tmp_param4, sizeof(tmp_param4));
  if (raw_param4 != 0) {
    _this->_internal_set_param4(from._internal_param4());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_param5 = from._internal_param5();
  ::uint32_t raw_param5;
  memcpy(&raw_param5, &tmp_param5, sizeof(tmp_param5));
  if (raw_param5 != 0) {
    _this->_internal_set_param5(from._internal_param5());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_param6 = from._internal_param6();
  ::uint32_t raw_param6;
  memcpy(&raw_param6, &tmp_param6, sizeof(tmp_param6));
  if (raw_param6 != 0) {
    _this->_internal_set_param6(from._internal_param6());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_param7 = from._internal_param7();
  ::uint32_t raw_param7;
  memcpy(&raw_param7, &tmp_param7, sizeof(tmp_param7));
  if (raw_param7 != 0) {
    _this->_internal_set_param7(from._internal_param7());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UsvLink.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Command::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Command::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Command::InternalSwap(Command* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command, _impl_.param7_)
      + sizeof(Command::_impl_.param7_)
      - PROTOBUF_FIELD_OFFSET(Command, _impl_.cmd_id_)>(
          reinterpret_cast<char*>(&_impl_.cmd_id_),
          reinterpret_cast<char*>(&other->_impl_.cmd_id_));
}

::google::protobuf::Metadata Command::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fcommand_2eproto_getter, &descriptor_table_msg_5fcommand_2eproto_once,
      file_level_metadata_msg_5fcommand_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace UsvLink
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
